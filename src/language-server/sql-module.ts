/******************************************************************************
 * Copyright 2022-2023 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/

import {
    createDefaultModule,
    createDefaultSharedModule,
    DefaultSharedModuleContext,
    inject,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices,
    PartialLangiumSharedServices,
} from "langium";
import {
    SqlGeneratedModule,
    SqlGeneratedSharedModule,
} from "./generated/module";
import { SqlScopeProvider } from "./sql-scope";
import { SqlValidationRegistry, SqlValidator } from "./sql-validator";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type SqlAddedServices = {
    validation: {
        SqlValidator: SqlValidator;
    };
};

export type SqlSharedServices = {
    workspace: {
    };
};

export const SqlSharedModule: Module<
    LangiumSharedServices & SqlSharedServices,
    PartialLangiumSharedServices & SqlSharedServices
> = {
    workspace: {
    },
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type SqlServices = LangiumServices & SqlAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const SqlModule: Module<
    SqlServices,
    PartialLangiumServices & SqlAddedServices
> = {
    references: {
        ScopeProvider: (services) => new SqlScopeProvider(services),
    },
    validation: {
        ValidationRegistry: (services) => new SqlValidationRegistry(services),
        SqlValidator: () => new SqlValidator(),
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createSqlServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices;
    Sql: SqlServices;
} {
    const shared = inject(
        createDefaultSharedModule(context),
        SqlGeneratedSharedModule,
        SqlSharedModule as any
    );
    const Sql = inject(
        createDefaultModule({ shared }),
        SqlGeneratedModule,
        SqlModule
    );
    shared.ServiceRegistry.register(Sql);
    return { shared, Sql };
}
